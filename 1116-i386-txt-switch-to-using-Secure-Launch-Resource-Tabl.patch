From f5ce8a71089c4cd2899e4f191aa0fc7ca3c79d79 Mon Sep 17 00:00:00 2001
From: Ross Philipson <ross.philipson@oracle.com>
Date: Fri, 13 Jan 2023 15:11:26 -0500
Subject: [PATCH] i386/txt: switch to using Secure Launch Resource Table
 interface

Signed-off-by: Ross Philipson <ross.philipson@oracle.com>
Signed-off-by: Sergii Dmytruk <sergii.dmytruk@3mdeb.com>
---
 grub-core/loader/i386/txt/txt.c | 109 ++++++++++++++++++++++++--------
 include/grub/i386/slaunch.h     |  30 ++++++++-
 include/grub/i386/txt.h         |  26 +++-----
 3 files changed, 121 insertions(+), 44 deletions(-)

diff --git a/grub-core/loader/i386/txt/txt.c b/grub-core/loader/i386/txt/txt.c
index 44a0b5c01bf3..cc4db716d205 100644
--- a/grub-core/loader/i386/txt/txt.c
+++ b/grub-core/loader/i386/txt/txt.c
@@ -60,6 +60,7 @@
 #include <grub/dl.h>
 #include <grub/acpi.h>
 #include <grub/safemath.h>
+#include <grub/slr_table.h>
 #include <grub/cpu/relocator.h>
 #include <grub/i386/cpuid.h>
 #include <grub/i386/msr.h>
@@ -75,6 +76,8 @@
 
 #define OS_SINIT_DATA_MIN_VER		OS_SINIT_DATA_TPM_12_VER
 
+static struct grub_slr_entry_intel_info slr_intel_info_staging = {0};
+
 static grub_err_t
 enable_smx_mode (void)
 {
@@ -249,33 +252,39 @@ grub_txt_prepare_cpu (void)
 }
 
 static void
-save_mtrrs (struct grub_txt_os_mle_data *os_mle_data)
+save_mtrrs (struct grub_slr_txt_mtrr_state *saved_bsp_mtrrs)
 {
   grub_uint64_t i;
 
-  os_mle_data->saved_bsp_mtrrs.default_mem_type =
+  saved_bsp_mtrrs->default_mem_type =
     grub_rdmsr (GRUB_MSR_X86_MTRR_DEF_TYPE);
 
-  os_mle_data->saved_bsp_mtrrs.mtrr_vcnt =
+  saved_bsp_mtrrs->mtrr_vcnt =
     grub_rdmsr (GRUB_MSR_X86_MTRRCAP) & GRUB_MSR_X86_VCNT_MASK;
 
-  if (os_mle_data->saved_bsp_mtrrs.mtrr_vcnt > GRUB_SL_MAX_VARIABLE_MTRRS)
+  if (saved_bsp_mtrrs->mtrr_vcnt > GRUB_TXT_VARIABLE_MTRRS_LENGTH)
     {
       /* Print warning but continue saving what we can... */
       grub_printf ("WARNING: Actual number of variable MTRRs (%" PRIuGRUB_UINT64_T
 		   ") > GRUB_SL_MAX_VARIABLE_MTRRS (%d)\n",
-		   os_mle_data->saved_bsp_mtrrs.mtrr_vcnt,
-		   GRUB_SL_MAX_VARIABLE_MTRRS);
-      os_mle_data->saved_bsp_mtrrs.mtrr_vcnt = GRUB_SL_MAX_VARIABLE_MTRRS;
+		   saved_bsp_mtrrs->mtrr_vcnt,
+		   GRUB_TXT_VARIABLE_MTRRS_LENGTH);
+      saved_bsp_mtrrs->mtrr_vcnt = GRUB_TXT_VARIABLE_MTRRS_LENGTH;
     }
 
-  for (i = 0; i < os_mle_data->saved_bsp_mtrrs.mtrr_vcnt; ++i)
+  for (i = 0; i < saved_bsp_mtrrs->mtrr_vcnt; ++i)
     {
-      os_mle_data->saved_bsp_mtrrs.mtrr_pair[i].mtrr_physmask =
+      saved_bsp_mtrrs->mtrr_pair[i].mtrr_physmask =
         grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSMASK (i));
-      os_mle_data->saved_bsp_mtrrs.mtrr_pair[i].mtrr_physbase =
+      saved_bsp_mtrrs->mtrr_pair[i].mtrr_physbase =
         grub_rdmsr (GRUB_MSR_X86_MTRR_PHYSBASE (i));
     }
+  /* Zero unused array items. */
+  for ( ; i < GRUB_TXT_VARIABLE_MTRRS_LENGTH; ++i)
+    {
+      saved_bsp_mtrrs->mtrr_pair[i].mtrr_physmask = 0;
+      saved_bsp_mtrrs->mtrr_pair[i].mtrr_physbase = 0;
+    }
 }
 
 static void
@@ -545,6 +554,20 @@ grub_txt_init_tpm_event_log (void *buf, grub_size_t size)
   elog->next_event_offset = sizeof(*elog);
 }
 
+static void
+setup_txt_slrt_entry (struct grub_slaunch_params *slparams,
+                      struct grub_txt_os_mle_data *os_mle_data)
+{
+  struct grub_slr_table *slr_table = slparams->slr_table_mem;
+  struct grub_slr_entry_hdr *txt_info;
+
+  grub_slr_add_entry (slr_table, &slr_intel_info_staging.hdr);
+
+  txt_info = grub_slr_next_entry_by_tag (slr_table, NULL, GRUB_SLR_ENTRY_INTEL_INFO);
+  os_mle_data->txt_info = (grub_addr_t) slparams->slr_table_base
+      + ((grub_addr_t) txt_info - (grub_addr_t) slparams->slr_table_mem);
+}
+
 /* Adds new element to the end. `size` does not include common header. */
 /* Assume that heap was cleared and there is enough space to add the element. */
 static inline struct grub_txt_heap_ext_data_element *
@@ -590,6 +613,20 @@ init_txt_heap (struct grub_slaunch_params *slparams, struct grub_txt_acm_header
   size = (grub_uint64_t *) ((grub_addr_t) os_mle_data - sizeof (grub_uint64_t));
   *size = sizeof (*os_mle_data) + sizeof (grub_uint64_t);
 
+  if (slparams->slr_table_base == GRUB_SLAUNCH_STORE_IN_OS2MLE)
+    {
+      /* SLRT needs to be at least 4-byte aligned per specification. */
+      slparams->slr_table_base =
+          ALIGN_UP ((grub_addr_t) os_mle_data + sizeof (*os_mle_data), 4);
+
+      /* Recompute size including SLRT table in it. */
+      *size = (slparams->slr_table_base + slparams->slr_table_size)
+            - ((grub_addr_t) os_mle_data - sizeof (grub_uint64_t));
+
+      /* Size of heap sections should be a multiple of 8. */
+      *size = ALIGN_UP (*size, 8);
+    }
+
   if (grub_add (grub_txt_bios_data_size (txt_heap), *size, &size_total) ||
       (size_total > grub_txt_get_heap_size ()))
     {
@@ -602,16 +639,20 @@ init_txt_heap (struct grub_slaunch_params *slparams, struct grub_txt_acm_header
 
   os_mle_data->version = GRUB_SL_OS_MLE_STRUCT_VERSION;
   os_mle_data->boot_params_addr = slparams->boot_params_addr;
-  os_mle_data->saved_misc_enable_msr = grub_rdmsr (GRUB_MSR_X86_MISC_ENABLE);
+  os_mle_data->slrt = slparams->slr_table_base;
 
   os_mle_data->ap_wake_block = slparams->ap_wake_block;
   os_mle_data->ap_wake_block_size = slparams->ap_wake_block_size;
 
-  os_mle_data->evtlog_addr = slparams->tpm_evt_log_base;
-  os_mle_data->evtlog_size = slparams->tpm_evt_log_size;
+  /* Setup the TXT specific SLR information */
+  slr_intel_info_staging.hdr.tag = GRUB_SLR_ENTRY_INTEL_INFO;
+  slr_intel_info_staging.hdr.size = sizeof(struct grub_slr_entry_intel_info);
+  slr_intel_info_staging.saved_misc_enable_msr =
+               grub_rdmsr (GRUB_MSR_X86_MISC_ENABLE);
 
+  /* Save the BSPs MTRR state so post launch can restore it. */
   grub_dprintf ("slaunch", "Saving MTRRs to OS MLE data\n");
-  save_mtrrs (os_mle_data);
+  save_mtrrs (&slr_intel_info_staging.saved_bsp_mtrrs);
 
   /* OS/loader to SINIT data. */
   grub_dprintf ("slaunch", "Get supported OS SINIT data version\n");
@@ -999,9 +1040,10 @@ grub_err_t
 grub_txt_boot_prepare (struct grub_slaunch_params *slparams)
 {
   grub_err_t err;
+  grub_uint8_t *txt_heap;
+  struct grub_txt_os_mle_data *os_mle_data;
   struct grub_txt_mle_header *mle_header;
   struct grub_txt_acm_header *sinit_base;
-  int i;
 
   sinit_base = grub_txt_sinit_select (grub_slaunch_module ());
 
@@ -1017,24 +1059,22 @@ grub_txt_boot_prepare (struct grub_slaunch_params *slparams)
   grub_dprintf ("slaunch", "TXT heap successfully prepared\n");
 
   /* Update the MLE header. */
-  mle_header = (struct grub_txt_mle_header *)(grub_addr_t) (slparams->mle_start + slparams->mle_header_offset);
+  mle_header =
+      (struct grub_txt_mle_header *) ((grub_uint8_t *) slparams->mle_mem + slparams->mle_header_offset);
   mle_header->first_valid_page = 0;
   mle_header->mle_end = slparams->mle_size;
 
   slparams->dce_base = (grub_uint32_t)(grub_addr_t) sinit_base;
   slparams->dce_size = sinit_base->size * 4;
 
-  /*
-   * Access to locality 4 isn't available to software, skip it. Don't bother
-   * checking TPM status, we have no tools for recovering from bad state better
-   * than command abort, which is part of locality relinquish. Write performed
-   * by the following function is no-op if locality is neither active nor
-   * requested.
-   */
-  for (i = 0; i < 4; ++i)
-    grub_tpm_relinquish_locality (i);
+  /* Setup of SLR table. */
+  grub_slaunch_init_slrt_storage (GRUB_SLR_INTEL_TXT);
+  txt_heap = grub_txt_get_heap ();
+  os_mle_data = grub_txt_os_mle_data_start (txt_heap);
+  setup_txt_slrt_entry (slparams, os_mle_data);
 
-  grub_dprintf ("slaunch", "TPM localities relinquished\n");
+  grub_tpm_relinquish_locality (0);
+  grub_dprintf ("slaunch", "Relinquished TPM locality 0\n");
 
   err = set_mtrrs_for_acmod (sinit_base);
   if (err)
@@ -1053,3 +1093,20 @@ grub_txt_boot_prepare (struct grub_slaunch_params *slparams)
 
   return GRUB_ERR_NONE;
 }
+
+void
+grub_txt_add_slrt_policy_entries (void)
+{
+  struct grub_txt_os_mle_data *os_mle_data;
+  grub_uint8_t *txt_heap;
+
+  txt_heap = grub_txt_get_heap ();
+  os_mle_data = grub_txt_os_mle_data_start (txt_heap);
+
+  grub_slaunch_add_slrt_policy_entry (GRUB_SLAUNCH_DATA_PCR,
+                                      GRUB_SLR_ET_TXT_OS2MLE,
+                                      /*flags=*/0,
+                                      (grub_addr_t) os_mle_data,
+                                      sizeof(*os_mle_data),
+                                      "Measured TXT OS-MLE data");
+}
diff --git a/include/grub/i386/slaunch.h b/include/grub/i386/slaunch.h
index 93a491e4fc9e..a694260cbeea 100644
--- a/include/grub/i386/slaunch.h
+++ b/include/grub/i386/slaunch.h
@@ -31,6 +31,19 @@
 
 #define GRUB_SLAUNCH_TPM_EVT_LOG_SIZE	(8 * GRUB_PAGE_SIZE)
 
+/*
+ * Special value for slr_table_base of struct grub_slaunch_params that indicates
+ * that the table should be stored near OS2MLE data (right after it).
+ *
+ * In this case:
+ *  1. Platform-specific code (e.g., TXT-code) is responsible for setting
+ *     slr_table_base to its final value
+ *  2. SLRT should be copied from slr_table_mem to slr_table_base after invoking
+ *     grub_slaunch_finish_slr_table () by the code which used this special
+ *     value.
+ */
+#define GRUB_SLAUNCH_STORE_IN_OS2MLE    ((grub_uint64_t) 0xFFFFFFFFFFFFFFFF)
+
 #ifndef ASM_FILE
 
 #include <grub/types.h>
@@ -38,11 +51,16 @@
 struct grub_slaunch_params
 {
   grub_uint32_t boot_params_addr;
+  grub_uint64_t slr_table_base;
+  /* This is size of SLRT buffer, so maximum size of the table. */
+  grub_uint32_t slr_table_size;
+  void *slr_table_mem;
   grub_uint32_t mle_start;
   grub_uint32_t mle_size;
-  void *mle_ptab_mem;
+  void *mle_mem;
   grub_uint64_t mle_ptab_target;
   grub_uint32_t mle_ptab_size;
+  void *mle_ptab_mem;
   grub_uint32_t mle_header_offset;
   grub_uint32_t ap_wake_block;
   grub_uint32_t ap_wake_block_size;
@@ -56,6 +74,16 @@ extern grub_uint32_t grub_slaunch_platform_type (void);
 extern void *grub_slaunch_module (void);
 extern struct grub_slaunch_params *grub_slaunch_params (void);
 
+extern void grub_slaunch_init_slrt_storage (int arch);
+extern void grub_slaunch_add_slrt_policy_entries (void);
+extern void grub_slaunch_add_slrt_policy_entry (grub_uint16_t pcr,
+                                                grub_uint16_t entity_type,
+                                                grub_uint16_t flags,
+                                                grub_uint64_t entity,
+                                                grub_uint64_t size,
+                                                const char *evt_info);
+extern void grub_slaunch_finish_slr_table (void);
+
 #endif /* ASM_FILE */
 
 #endif /* GRUB_I386_SLAUNCH_H */
diff --git a/include/grub/i386/txt.h b/include/grub/i386/txt.h
index 155ebab0ff6a..c3dde57ea849 100644
--- a/include/grub/i386/txt.h
+++ b/include/grub/i386/txt.h
@@ -353,29 +353,14 @@ struct grub_txt_bios_data
 /* GRUB SLAUNCH specific definitions OS-MLE data */
 #define GRUB_SL_OS_MLE_STRUCT_VERSION	1
 
-struct grub_slaunch_mtrr_pair
-{
-  grub_uint64_t mtrr_physbase;
-  grub_uint64_t mtrr_physmask;
-} GRUB_PACKED;
-
-struct grub_slaunch_mtrr_state
-{
-  grub_uint64_t default_mem_type;
-  grub_uint64_t mtrr_vcnt;
-  struct grub_slaunch_mtrr_pair mtrr_pair[GRUB_SL_MAX_VARIABLE_MTRRS];
-} GRUB_PACKED;
-
 struct grub_txt_os_mle_data
 {
   grub_uint32_t version;
   grub_uint32_t boot_params_addr;
-  grub_uint64_t saved_misc_enable_msr;
-  struct grub_slaunch_mtrr_state saved_bsp_mtrrs;
+  grub_uint32_t slrt;
+  grub_uint32_t txt_info;
   grub_uint32_t ap_wake_block;
   grub_uint32_t ap_wake_block_size;
-  grub_uint64_t evtlog_addr;
-  grub_uint32_t evtlog_size;
   grub_uint8_t mle_scratch[64];
 } GRUB_PACKED;
 
@@ -729,6 +714,13 @@ extern void grub_txt_setup_mle_ptab (struct grub_slaunch_params *slparams);
 extern grub_err_t grub_txt_init (void);
 extern void grub_txt_shutdown (void);
 extern void grub_txt_state_show (void);
+/*
+ * This function doesn't finish building of SLRT.  It's caller's responsibility
+ * to call grub_slaunch_finish_slr_table() after making any necessary
+ * grub_slr_add_entry() and grub_slaunch_add_slrt_policy_entry() calls including
+ * grub_txt_add_slrt_polic_entries() and grub_slaunch_add_slrt_policy_entries().
+ */
 extern grub_err_t grub_txt_boot_prepare (struct grub_slaunch_params *slparams);
+extern void grub_txt_add_slrt_policy_entries (void);
 
 #endif
-- 
2.41.0

